name: tests

concurrency:
  # Run only for most recent commit in PRs but for all tags and commits on main
  # Ref: https://docs.github.com/en/actions/using-jobs/using-concurrency
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
    - 'main'
  push:
    branches:
    - 'main'
  workflow_dispatch: {}

jobs:
  installer-tests:
    runs-on: ubuntu-latest
    steps:

    - name: checkout repository
      uses: actions/checkout@v3

    - name: run installer script
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: ./docs/install.sh

    - name: run ktf to verify if it installed properly to a desired location
      run: ~/.local/bin/ktf

  unit-tests:
    runs-on: ubuntu-latest
    steps:

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: run unit tests
      run: make test.unit

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        flags: unit-test
        files: unit.coverage.out
        verbose: true

  setup-integration-tests:
    runs-on: ubuntu-latest
    outputs:
      test_names: ${{ steps.set_test_names.outputs.test_names }}
    steps:

    - uses: actions/checkout@v3

    - id: set_test_names
      name: Set test names
      working-directory: test/integration/
      # grep magic described in https://unix.stackexchange.com/a/13472
      # sed to add the extra $ is because some of our test names overlap. we need it so the -run regex only matches one test
      run: |
        echo "test_names=$(grep -shoP "(?<=^func )(Test[a-zA-z_0-9]+)(?=\(t \*testing.T\) {)" * | sed -e "s/$/\$/"| jq -R . | jq -cs .)" >> $GITHUB_OUTPUT

    - name: Print test names
      run: echo "Test names ${{ steps.set_test_names.outputs.test_names }}"

  integration-tests:
    needs:
    - setup-integration-tests
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.setup-integration-tests.outputs.test_names) }}
    runs-on: ubuntu-latest
    steps:

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Kong/kong-license@master
      id: license
      with:
        password: ${{ secrets.PULP_PASSWORD }}

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: run integration test ${{ matrix.test }}
      run: make test.integration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KTF_TEST_KONG_PULL_USERNAME: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
        KTF_TEST_KONG_PULL_PASSWORD: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUBLIC_TOKEN }}
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        TEST_RUN: ${{ matrix.test }}
        NCPU: 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        flags: integration-test
        files: integration.coverage.out
        verbose: true

  integration-tests-passed:
    needs: integration-tests
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: integrations tests pased
      run: echo all integrations tests passed

  e2e-tests:
    environment: gcloud
    runs-on: ubuntu-latest
    steps:
      - name: Detect if we should run (have required secrets)
        id: detect_if_should_run
        run: echo "result=${{ secrets.PULP_PASSWORD != '' && secrets.GOOGLE_APPLICATION_CREDENTIALS != '' }}" >> $GITHUB_OUTPUT

      - uses: Kong/kong-license@master
        if: steps.detect_if_should_run.outputs.result == 'true'
        id: license
        with:
          password: ${{ secrets.PULP_PASSWORD }}

      - name: checkout repository
        if: steps.detect_if_should_run.outputs.result == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup golang
        if: steps.detect_if_should_run.outputs.result == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: cache go modules
        if: steps.detect_if_should_run.outputs.result == 'true'
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-

      - name: run e2e tests
        if: steps.detect_if_should_run.outputs.result == 'true'
        run: make test.e2e
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
          GOOGLE_LOCATION: ${{ secrets.GOOGLE_LOCATION }}
          KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
